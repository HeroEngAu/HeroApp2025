type Form @aws_iam @aws_api_key {
  userId: String
  createdAt: AWSDateTime
  equipment: String
  published: Boolean
  name: String
  description: String
  content: String
  visits: Int
  submissions: Int
  shareURL: String
  FormSubmissions(filter: ModelFormSubmissionsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelFormSubmissionsConnection
  id: ID!
  updatedAt: AWSDateTime!
}

type FormSubmissions @aws_iam @aws_api_key {
  formId: String
  createdAt: AWSDateTime
  content: String
  form: Form
  id: ID!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelFormConnection @aws_api_key @aws_iam {
  items: [Form]!
  nextToken: String
}

input ModelFormFilterInput {
  userId: ModelStringInput
  createdAt: ModelStringInput
  equipment: ModelStringInput
  published: ModelBooleanInput
  name: ModelStringInput
  description: ModelStringInput
  content: ModelStringInput
  visits: ModelIntInput
  submissions: ModelIntInput
  shareURL: ModelStringInput
  id: ModelIDInput
  updatedAt: ModelStringInput
  and: [ModelFormFilterInput]
  or: [ModelFormFilterInput]
  not: ModelFormFilterInput
}

type Query {
  getForm(id: ID!): Form @aws_api_key @aws_iam
  listForms(filter: ModelFormFilterInput, limit: Int, nextToken: String): ModelFormConnection @aws_api_key @aws_iam
  getFormSubmissions(id: ID!): FormSubmissions @aws_api_key @aws_iam
  listFormSubmissions(filter: ModelFormSubmissionsFilterInput, limit: Int, nextToken: String): ModelFormSubmissionsConnection @aws_api_key @aws_iam
}

input ModelFormConditionInput {
  userId: ModelStringInput
  createdAt: ModelStringInput
  equipment: ModelStringInput
  published: ModelBooleanInput
  name: ModelStringInput
  description: ModelStringInput
  content: ModelStringInput
  visits: ModelIntInput
  submissions: ModelIntInput
  shareURL: ModelStringInput
  and: [ModelFormConditionInput]
  or: [ModelFormConditionInput]
  not: ModelFormConditionInput
  updatedAt: ModelStringInput
}

input CreateFormInput {
  userId: String
  createdAt: AWSDateTime
  equipment: String
  published: Boolean
  name: String
  description: String
  content: String
  visits: Int
  submissions: Int
  shareURL: String
  id: ID
}

input UpdateFormInput {
  userId: String
  createdAt: AWSDateTime
  equipment: String
  published: Boolean
  name: String
  description: String
  content: String
  visits: Int
  submissions: Int
  shareURL: String
  id: ID!
}

input DeleteFormInput {
  id: ID!
}

type Mutation {
  createForm(input: CreateFormInput!, condition: ModelFormConditionInput): Form @aws_api_key @aws_iam
  updateForm(input: UpdateFormInput!, condition: ModelFormConditionInput): Form @aws_api_key @aws_iam
  deleteForm(input: DeleteFormInput!, condition: ModelFormConditionInput): Form @aws_api_key @aws_iam
  createFormSubmissions(input: CreateFormSubmissionsInput!, condition: ModelFormSubmissionsConditionInput): FormSubmissions @aws_api_key @aws_iam
  updateFormSubmissions(input: UpdateFormSubmissionsInput!, condition: ModelFormSubmissionsConditionInput): FormSubmissions @aws_api_key @aws_iam
  deleteFormSubmissions(input: DeleteFormSubmissionsInput!, condition: ModelFormSubmissionsConditionInput): FormSubmissions @aws_api_key @aws_iam
}

input ModelSubscriptionFormFilterInput {
  userId: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  equipment: ModelSubscriptionStringInput
  published: ModelSubscriptionBooleanInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  visits: ModelSubscriptionIntInput
  submissions: ModelSubscriptionIntInput
  shareURL: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionFormFilterInput]
  or: [ModelSubscriptionFormFilterInput]
}

type Subscription {
  onCreateForm(filter: ModelSubscriptionFormFilterInput): Form @aws_subscribe(mutations: ["createForm"]) @aws_api_key @aws_iam
  onUpdateForm(filter: ModelSubscriptionFormFilterInput): Form @aws_subscribe(mutations: ["updateForm"]) @aws_api_key @aws_iam
  onDeleteForm(filter: ModelSubscriptionFormFilterInput): Form @aws_subscribe(mutations: ["deleteForm"]) @aws_api_key @aws_iam
  onCreateFormSubmissions(filter: ModelSubscriptionFormSubmissionsFilterInput): FormSubmissions @aws_subscribe(mutations: ["createFormSubmissions"]) @aws_api_key @aws_iam
  onUpdateFormSubmissions(filter: ModelSubscriptionFormSubmissionsFilterInput): FormSubmissions @aws_subscribe(mutations: ["updateFormSubmissions"]) @aws_api_key @aws_iam
  onDeleteFormSubmissions(filter: ModelSubscriptionFormSubmissionsFilterInput): FormSubmissions @aws_subscribe(mutations: ["deleteFormSubmissions"]) @aws_api_key @aws_iam
}

type ModelFormSubmissionsConnection @aws_iam @aws_api_key {
  items: [FormSubmissions]!
  nextToken: String
}

input ModelFormSubmissionsFilterInput {
  formId: ModelStringInput
  createdAt: ModelStringInput
  content: ModelStringInput
  id: ModelIDInput
  updatedAt: ModelStringInput
  and: [ModelFormSubmissionsFilterInput]
  or: [ModelFormSubmissionsFilterInput]
  not: ModelFormSubmissionsFilterInput
}

input ModelFormSubmissionsConditionInput {
  formId: ModelStringInput
  createdAt: ModelStringInput
  content: ModelStringInput
  and: [ModelFormSubmissionsConditionInput]
  or: [ModelFormSubmissionsConditionInput]
  not: ModelFormSubmissionsConditionInput
  updatedAt: ModelStringInput
}

input CreateFormSubmissionsInput {
  formId: String
  createdAt: AWSDateTime
  content: String
  id: ID
}

input UpdateFormSubmissionsInput {
  formId: String
  createdAt: AWSDateTime
  content: String
  id: ID!
}

input DeleteFormSubmissionsInput {
  id: ID!
}

input ModelSubscriptionFormSubmissionsFilterInput {
  formId: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionFormSubmissionsFilterInput]
  or: [ModelSubscriptionFormSubmissionsFilterInput]
}
